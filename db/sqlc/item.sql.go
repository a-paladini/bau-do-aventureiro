// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: item.sql

package db

import (
	"context"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items
(name, description, category, price, slot, origin)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, description, category, price, slot, origin
`

type CreateItemParams struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Category    string  `json:"category"`
	Price       int32   `json:"price"`
	Slot        float64 `json:"slot"`
	Origin      string  `json:"origin"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Items, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Price,
		arg.Slot,
		arg.Origin,
	)
	var i Items
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Slot,
		&i.Origin,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, name, description, category, price, slot, origin FROM items
WHERE id = $1
`

func (q *Queries) GetItem(ctx context.Context, id int32) (Items, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Items
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Slot,
		&i.Origin,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT id, name, description, category, price, slot, origin FROM items
ORDER BY id OFFSET 5
`

func (q *Queries) ListItems(ctx context.Context) ([]Items, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Items
	for rows.Next() {
		var i Items
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Slot,
			&i.Origin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE items
SET name = $2, description = $3, category = $4, price = $5, slot = $6,
origin = $7
WHERE id = $1
RETURNING id, name, description, category, price, slot, origin
`

type UpdateItemParams struct {
	ID          int32   `json:"id"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Category    string  `json:"category"`
	Price       int32   `json:"price"`
	Slot        float64 `json:"slot"`
	Origin      string  `json:"origin"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Items, error) {
	row := q.db.QueryRowContext(ctx, updateItem,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Price,
		arg.Slot,
		arg.Origin,
	)
	var i Items
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Slot,
		&i.Origin,
	)
	return i, err
}
