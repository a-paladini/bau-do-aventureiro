// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: weapon.sql

package db

import (
	"context"
)

const createWeapon = `-- name: CreateWeapon :one
INSERT INTO weapons 
(name, description, category, price, slot, 
origin, damage, critical, range, type_damage, 
property, proficiency, special)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) 
RETURNING id, name, description, category, price, slot, origin, damage, critical, range, type_damage, property, proficiency, special
`

type CreateWeaponParams struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Category    string  `json:"category"`
	Price       float64 `json:"price"`
	Slot        float64 `json:"slot"`
	Origin      string  `json:"origin"`
	Damage      string  `json:"damage"`
	Critical    string  `json:"critical"`
	Range       string  `json:"range"`
	TypeDamage  string  `json:"type_damage"`
	Property    string  `json:"property"`
	Proficiency string  `json:"proficiency"`
	Special     string  `json:"special"`
}

func (q *Queries) CreateWeapon(ctx context.Context, arg CreateWeaponParams) (Weapons, error) {
	row := q.db.QueryRowContext(ctx, createWeapon,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Price,
		arg.Slot,
		arg.Origin,
		arg.Damage,
		arg.Critical,
		arg.Range,
		arg.TypeDamage,
		arg.Property,
		arg.Proficiency,
		arg.Special,
	)
	var i Weapons
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Slot,
		&i.Origin,
		&i.Damage,
		&i.Critical,
		&i.Range,
		&i.TypeDamage,
		&i.Property,
		&i.Proficiency,
		&i.Special,
	)
	return i, err
}

const deleteWeapon = `-- name: DeleteWeapon :exec
DELETE FROM weapons
WHERE id = $1
`

func (q *Queries) DeleteWeapon(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWeapon, id)
	return err
}

const getWeapon = `-- name: GetWeapon :one
SELECT id, name, description, category, price, slot, origin, damage, critical, range, type_damage, property, proficiency, special FROM weapons
WHERE id = $1
`

func (q *Queries) GetWeapon(ctx context.Context, id int32) (Weapons, error) {
	row := q.db.QueryRowContext(ctx, getWeapon, id)
	var i Weapons
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Slot,
		&i.Origin,
		&i.Damage,
		&i.Critical,
		&i.Range,
		&i.TypeDamage,
		&i.Property,
		&i.Proficiency,
		&i.Special,
	)
	return i, err
}

const listWeapons = `-- name: ListWeapons :many
SELECT id, name, description, category, price, slot, origin, damage, critical, range, type_damage, property, proficiency, special FROM weapons
ORDER BY id OFFSET 5
`

func (q *Queries) ListWeapons(ctx context.Context) ([]Weapons, error) {
	rows, err := q.db.QueryContext(ctx, listWeapons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Weapons
	for rows.Next() {
		var i Weapons
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Slot,
			&i.Origin,
			&i.Damage,
			&i.Critical,
			&i.Range,
			&i.TypeDamage,
			&i.Property,
			&i.Proficiency,
			&i.Special,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWeapon = `-- name: UpdateWeapon :one
UPDATE weapons
SET name = $2, description = $3, category = $4, price = $5, slot = $6,
origin = $7, damage = $8, critical = $9, range = $10, type_damage = $11,
property = $12, proficiency = $13, special = $14
WHERE id = $1
RETURNING id, name, description, category, price, slot, origin, damage, critical, range, type_damage, property, proficiency, special
`

type UpdateWeaponParams struct {
	ID          int32   `json:"id"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Category    string  `json:"category"`
	Price       float64 `json:"price"`
	Slot        float64 `json:"slot"`
	Origin      string  `json:"origin"`
	Damage      string  `json:"damage"`
	Critical    string  `json:"critical"`
	Range       string  `json:"range"`
	TypeDamage  string  `json:"type_damage"`
	Property    string  `json:"property"`
	Proficiency string  `json:"proficiency"`
	Special     string  `json:"special"`
}

func (q *Queries) UpdateWeapon(ctx context.Context, arg UpdateWeaponParams) (Weapons, error) {
	row := q.db.QueryRowContext(ctx, updateWeapon,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Price,
		arg.Slot,
		arg.Origin,
		arg.Damage,
		arg.Critical,
		arg.Range,
		arg.TypeDamage,
		arg.Property,
		arg.Proficiency,
		arg.Special,
	)
	var i Weapons
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Slot,
		&i.Origin,
		&i.Damage,
		&i.Critical,
		&i.Range,
		&i.TypeDamage,
		&i.Property,
		&i.Proficiency,
		&i.Special,
	)
	return i, err
}
